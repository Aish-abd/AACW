package cw;

public class DoubleStack {
	
	    private int[] array;
	    private int redTop;
	    private int blueTop;

	    public DoubleStack(int size) {
	        array = new int[size];
	        redTop = -1;
	        blueTop = size;
	    }

	    public void redPush(int value) {
	        if (redTop + 1 == blueTop) {
	            throw new IllegalStateException("Stacks are full");
	        }
	        array[++redTop] = value;
	    }

	    public void bluePush(int value) {
	        if (blueTop - 1 == redTop) {
	            throw new IllegalStateException("Stacks are full");
	        }
	        array[--blueTop] = value;
	    }

	    public int redPop() {
	        if (redTop == -1) {
	            throw new IllegalStateException("Red stack is empty");
	        }
	        return array[redTop--];
	    }

	    public int bluePop() {
	        if (blueTop == array.length) {
	            throw new IllegalStateException("Blue stack is empty");
	        }
	        return array[blueTop++];
	    }

	    public int redPeek() {
	        if (redTop == -1) {
	            throw new IllegalStateException("Red stack is empty");
	        }
	        return array[redTop];
	    }

	    public int bluePeek() {
	        if (blueTop == array.length) {
	            throw new IllegalStateException("Blue stack is empty");
	        }
	        return array[blueTop];
	    }

	    public boolean redIsEmpty() {
	        return redTop == -1;
	    }

	    public boolean blueIsEmpty() {
	        return blueTop == array.length;
	    }
	    public static void main(String args[])
		{
			DoubleStack ds = new DoubleStack(5);
			ds.redPush(7);
			ds.redPush(14);
			ds.bluePush(10);
			ds.bluePush(15);
			
			System.out.println("Peek element at blue stack : "
							 + ds.bluePeek());
			
			System.out.println("Peek element at red stack: "
							 + ds.redPeek());
			System.out.println("Pop element from red stack: "
					 + ds.redPop());
	
	        System.out.println("Pop element from blue stack: "
					+ ds.bluePop());
			
		}
	    
   }
